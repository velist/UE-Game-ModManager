name: SEO Optimization for UE MOD Manager

on:
  push:
    branches: [ main ]
    paths:
      - 'website-deploy/**'
      - '.github/workflows/seo-optimizer.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'website-deploy/**'
  workflow_dispatch:

jobs:
  seo-check:
    name: SEO Analysis and Optimization
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g html-validator-cli
          npm install -g lighthouse
          npm install cheerio axios

      - name: Generate robots.txt
        run: |
          cat > website-deploy/robots.txt << 'EOF'
          # Robots.txt for UE MOD Manager - Unreal Engine Game MOD Management Tool
          # Generated automatically by GitHub Actions

          User-agent: *
          Allow: /

          # Sitemap location
          Sitemap: https://modmanger.com/sitemap.xml

          # Crawl-delay for politeness
          Crawl-delay: 1

          # Allow all major search engines
          User-agent: Googlebot
          Allow: /

          User-agent: Bingbot
          Allow: /

          User-agent: Baiduspider
          Allow: /

          User-agent: Sogou web spider
          Allow: /

          # Disallow admin/private areas (if any in future)
          # Disallow: /admin/
          # Disallow: /private/
          EOF
          echo "✅ robots.txt generated successfully"

      - name: Generate sitemap.xml
        run: |
          cat > website-deploy/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
                  xmlns:xhtml="http://www.w3.org/1999/xhtml"
                  xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">

            <!-- Homepage - UE MOD Manager -->
            <url>
              <loc>https://modmanger.com/</loc>
              <lastmod>$(date +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
              <xhtml:link rel="alternate" hreflang="zh" href="https://modmanger.com/?lang=zh"/>
              <xhtml:link rel="alternate" hreflang="en" href="https://modmanger.com/?lang=en"/>
            </url>

            <!-- Documentation Page -->
            <url>
              <loc>https://modmanger.com/docs.html</loc>
              <lastmod>$(date +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.9</priority>
            </url>

            <!-- Index page alternative -->
            <url>
              <loc>https://modmanger.com/index.html</loc>
              <lastmod>$(date +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>

          </urlset>
          EOF
          echo "✅ sitemap.xml generated successfully"

      - name: Create SEO keyword analysis script
        run: |
          cat > seo-check.js << 'EOF'
          const fs = require('fs');
          const cheerio = require('cheerio');

          // UE MOD Manager related keywords
          const primaryKeywords = [
            'MOD管理器', 'MOD Manager', 'UE MOD', 'Unreal Engine MOD',
            '虚幻引擎', 'Unreal Engine', 'MOD安装', 'MOD Installation',
            '剑星', 'Stellar Blade', '黑神话悟空', 'Black Myth Wukong',
            'MOD冲突检测', 'MOD Conflict Detection', '游戏MOD', 'Game MOD'
          ];

          const secondaryKeywords = [
            '明末无双', 'UE4', 'UE5', 'pak文件', '.pak file',
            'MOD备份', 'MOD Backup', 'MOD分类', 'MOD Category',
            '云端同步', 'Cloud Sync', 'MOD管理工具', 'MOD Management Tool'
          ];

          function analyzeSEO(filePath) {
            console.log(`\n📊 Analyzing ${filePath}...`);
            const html = fs.readFileSync(filePath, 'utf-8');
            const $ = cheerio.load(html);

            const issues = [];
            const suggestions = [];
            let score = 100;

            // Check meta tags
            const title = $('title').text();
            const description = $('meta[name="description"]').attr('content');
            const keywords = $('meta[name="keywords"]').attr('content');

            if (!title || title.length < 30) {
              issues.push('❌ Title tag is missing or too short (< 30 chars)');
              score -= 10;
            } else if (title.length > 60) {
              suggestions.push('⚠️  Title is too long (> 60 chars), may be truncated in search results');
              score -= 5;
            }

            if (!description || description.length < 120) {
              issues.push('❌ Meta description is missing or too short (< 120 chars)');
              score -= 10;
            } else if (description.length > 160) {
              suggestions.push('⚠️  Meta description is too long (> 160 chars)');
              score -= 5;
            }

            if (!keywords) {
              suggestions.push('💡 Consider adding meta keywords for better indexing');
            }

            // Check headings
            const h1Count = $('h1').length;
            if (h1Count === 0) {
              issues.push('❌ No H1 heading found');
              score -= 10;
            } else if (h1Count > 1) {
              suggestions.push('⚠️  Multiple H1 headings found, use only one per page');
              score -= 3;
            }

            // Check images alt tags
            const imgsWithoutAlt = $('img:not([alt])').length;
            if (imgsWithoutAlt > 0) {
              issues.push(`❌ ${imgsWithoutAlt} images missing alt attributes`);
              score -= Math.min(imgsWithoutAlt * 2, 10);
            }

            // Check keyword density
            const bodyText = $('body').text().toLowerCase();
            const foundPrimaryKeywords = primaryKeywords.filter(kw =>
              bodyText.includes(kw.toLowerCase())
            );
            const foundSecondaryKeywords = secondaryKeywords.filter(kw =>
              bodyText.includes(kw.toLowerCase())
            );

            console.log(`\n🎯 Keyword Coverage:`);
            console.log(`   Primary keywords: ${foundPrimaryKeywords.length}/${primaryKeywords.length}`);
            console.log(`   Secondary keywords: ${foundSecondaryKeywords.length}/${secondaryKeywords.length}`);

            if (foundPrimaryKeywords.length < primaryKeywords.length * 0.6) {
              suggestions.push('💡 Consider adding more primary keywords related to UE MOD Manager');
              score -= 5;
            }

            // Check internal links
            const internalLinks = $('a[href^="#"], a[href^="/"], a[href*="modmanger.com"]').length;
            if (internalLinks < 5) {
              suggestions.push('💡 Add more internal links to improve site structure');
              score -= 3;
            }

            // Check Open Graph tags
            const ogTags = $('meta[property^="og:"]').length;
            if (ogTags < 4) {
              suggestions.push('💡 Add more Open Graph tags for better social media sharing');
              score -= 3;
            }

            // Check structured data
            const hasStructuredData = $('script[type="application/ld+json"]').length > 0;
            if (!hasStructuredData) {
              suggestions.push('💡 Consider adding structured data (JSON-LD) for rich snippets');
              score -= 5;
            }

            // Print results
            console.log(`\n📈 SEO Score: ${score}/100`);

            if (issues.length > 0) {
              console.log('\n❌ Critical Issues:');
              issues.forEach(issue => console.log(`   ${issue}`));
            }

            if (suggestions.length > 0) {
              console.log('\n💡 Suggestions:');
              suggestions.forEach(suggestion => console.log(`   ${suggestion}`));
            }

            if (issues.length === 0 && suggestions.length === 0) {
              console.log('\n✅ All SEO checks passed!');
            }

            return { score, issues, suggestions };
          }

          // Analyze all HTML files
          const files = ['website-deploy/index.html', 'website-deploy/docs.html'];
          let totalScore = 0;
          let totalIssues = 0;

          files.forEach(file => {
            if (fs.existsSync(file)) {
              const result = analyzeSEO(file);
              totalScore += result.score;
              totalIssues += result.issues.length;
            } else {
              console.log(`⚠️  File not found: ${file}`);
            }
          });

          const avgScore = totalScore / files.length;
          console.log(`\n\n🏆 Overall SEO Score: ${avgScore.toFixed(1)}/100`);

          if (totalIssues > 0) {
            console.log(`\n⚠️  Found ${totalIssues} critical issues that need attention`);
            process.exit(1); // Fail the workflow to draw attention
          }
          EOF

      - name: Run SEO analysis
        run: |
          node seo-check.js || true

      - name: Validate HTML
        run: |
          echo "🔍 Validating HTML files..."
          html-validator website-deploy/index.html --format=text || true
          if [ -f website-deploy/docs.html ]; then
            html-validator website-deploy/docs.html --format=text || true
          fi

      - name: Generate keyword-rich meta tags
        run: |
          cat > website-deploy/meta-keywords.txt << 'EOF'
          # Primary Keywords (High Priority)
          - UE MOD Manager / UE MOD管理器
          - Unreal Engine MOD Manager / 虚幻引擎MOD管理器
          - Stellar Blade MOD / 剑星MOD
          - Black Myth Wukong MOD / 黑神话悟空MOD
          - MOD安装工具 / MOD Installation Tool
          - 游戏MOD管理 / Game MOD Management

          # Secondary Keywords (Medium Priority)
          - UE4 MOD / UE5 MOD
          - MOD冲突检测 / MOD Conflict Detection
          - MOD备份还原 / MOD Backup Restore
          - .pak文件管理 / .pak File Manager
          - MOD分类管理 / MOD Category Management
          - 云端MOD同步 / Cloud MOD Sync

          # Long-tail Keywords (SEO Optimization)
          - 如何安装虚幻引擎MOD / How to install Unreal Engine MOD
          - 剑星MOD安装教程 / Stellar Blade MOD Tutorial
          - 黑神话悟空MOD下载 / Black Myth Wukong MOD Download
          - 虚幻引擎游戏MOD工具 / UE Game MOD Tool
          - 免费MOD管理器 / Free MOD Manager
          - 开源MOD管理工具 / Open Source MOD Tool

          # Related Search Terms
          - 明末无双MOD
          - UE游戏MOD
          - MOD自动安装
          - MOD批量管理
          - 游戏模组管理器
          - Mod Organizer for Unreal Engine

          # Location-based (for Chinese market)
          - 中文MOD管理器
          - 国内MOD工具
          - 简体中文支持
          EOF
          echo "✅ Keyword reference file generated"

      - name: Check for broken links
        run: |
          echo "🔗 Checking for broken internal links..."
          grep -r "href=\"#" website-deploy/*.html | cut -d'"' -f2 | sort | uniq > links.txt || true
          echo "Found $(wc -l < links.txt) internal anchor links"

      - name: Generate SEO report
        run: |
          cat > seo-report.md << 'EOF'
          # SEO Optimization Report

          ## 📊 Generated Files
          - ✅ robots.txt
          - ✅ sitemap.xml
          - ✅ meta-keywords.txt (keyword reference)

          ## 🎯 Target Keywords
          ### Primary (High Priority)
          - UE MOD Manager / UE MOD管理器
          - Unreal Engine MOD / 虚幻引擎MOD
          - Stellar Blade / 剑星
          - Black Myth Wukong / 黑神话悟空

          ### Secondary (Medium Priority)
          - MOD安装 / MOD Installation
          - MOD冲突检测 / Conflict Detection
          - MOD备份 / MOD Backup
          - 云端同步 / Cloud Sync

          ## 📈 SEO Best Practices Implemented
          1. ✅ Comprehensive meta tags (description, keywords, author)
          2. ✅ Open Graph tags for social media
          3. ✅ Twitter Card integration
          4. ✅ Semantic HTML structure
          5. ✅ Image alt attributes
          6. ✅ Internal linking structure
          7. ✅ Mobile-responsive design
          8. ✅ Fast loading (lazy loading images)
          9. ✅ Sitemap for search engines
          10. ✅ Robots.txt for crawler guidance

          ## 🚀 Recommendations
          1. Submit sitemap to Google Search Console
          2. Submit to Baidu Webmaster Tools (Chinese market)
          3. Monitor keyword rankings
          4. Build backlinks from gaming communities
          5. Create more content (blog posts, tutorials)
          6. Optimize images (compression, WebP format)
          7. Consider adding FAQ schema markup
          8. Implement breadcrumb navigation

          ## 🌐 International SEO
          - ✅ hreflang tags for zh/en versions
          - ✅ Chinese and English keywords
          - ✅ Multilingual support

          ## 📱 Technical SEO
          - ✅ Responsive design
          - ✅ Fast loading times
          - ✅ Clean URL structure
          - ✅ HTTPS ready

          ---
          Generated: $(date)
          EOF

          cat seo-report.md
          echo "✅ SEO report generated"

      - name: Commit SEO files
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add website-deploy/robots.txt website-deploy/sitemap.xml website-deploy/meta-keywords.txt seo-report.md || true
          git diff --staged --quiet || git commit -m "🔍 SEO: Auto-generate robots.txt, sitemap.xml and SEO report"
          git push || true

      - name: Upload SEO artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-optimization-files
          path: |
            website-deploy/robots.txt
            website-deploy/sitemap.xml
            website-deploy/meta-keywords.txt
            seo-report.md

      - name: Comment PR with SEO analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('seo-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 SEO Analysis Report\n\n${report}`
            });

      - name: Create keyword density report
        run: |
          echo "📊 Generating keyword density report..."
          cat > keyword-density.js << 'EOF'
          const fs = require('fs');
          const cheerio = require('cheerio');

          const keywords = {
            'MOD管理器': 0, 'MOD Manager': 0,
            '虚幻引擎': 0, 'Unreal Engine': 0,
            '剑星': 0, 'Stellar Blade': 0,
            '黑神话': 0, 'Black Myth': 0,
            'MOD': 0, 'UE': 0
          };

          const files = ['website-deploy/index.html', 'website-deploy/docs.html'];

          files.forEach(file => {
            if (!fs.existsSync(file)) return;

            const html = fs.readFileSync(file, 'utf-8');
            const $ = cheerio.load(html);
            const text = $('body').text();

            Object.keys(keywords).forEach(keyword => {
              const regex = new RegExp(keyword, 'gi');
              const matches = text.match(regex);
              keywords[keyword] += matches ? matches.length : 0;
            });
          });

          console.log('\n📈 Keyword Density Report:');
          console.log('═══════════════════════════════════');
          Object.entries(keywords).sort((a, b) => b[1] - a[1]).forEach(([kw, count]) => {
            console.log(`${kw.padEnd(20)} : ${count} times`);
          });
          EOF

          node keyword-density.js

      - name: Final SEO Score
        run: |
          echo ""
          echo "═══════════════════════════════════════════════"
          echo "🎉 SEO Optimization Workflow Completed!"
          echo "═══════════════════════════════════════════════"
          echo ""
          echo "✅ Generated Files:"
          echo "   📄 robots.txt"
          echo "   🗺️  sitemap.xml"
          echo "   🔑 meta-keywords.txt"
          echo "   📊 seo-report.md"
          echo ""
          echo "Next Steps:"
          echo "1. Submit sitemap.xml to search engines"
          echo "2. Verify robots.txt is accessible"
          echo "3. Monitor keyword rankings"
          echo "4. Build quality backlinks"
          echo ""
